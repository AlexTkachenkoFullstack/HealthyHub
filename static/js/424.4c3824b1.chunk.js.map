{"version":3,"file":"static/js/424.4c3824b1.chunk.js","mappings":"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","sources":["pages/DashboardPage/DashboardPage.styled.jsx","utils/DashBoard/TempData/MonthCaloriesSet.js","utils/DashBoard/avarageValue.js","pages/DashboardPage/components/Calories.jsx","utils/DashBoard/TempData/YearWaterSet.js","pages/DashboardPage/components/Water.jsx","utils/DashBoard/TempData/YearWeightSet.js","pages/DashboardPage/components/Weight/Weight.jsx","pages/DashboardPage/SelectPeriod/SelectPeriod.jsx","pages/DashboardPage/DashboardPage.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\n\nexport const Frame = styled('div')`\ndisplay: flex;\nflex-direction: column;\n`;\n\nexport const GraphicFrame = styled('div')`\n  display: flex;\n  flex-direction: row;\n  gap: 20px;\n  margin-bottom: 20px;\n`;\n\nexport const GraphicBody = styled('div')`\n  display: flex;\n  flex-direction: column;\n  background-color: var(--bg-secondary);\n  padding: 14px 24px 14px 24px;\n  border-radius: 12px;\n  \n`;\n\nexport const GraphicHeader = styled('div')`\n  display: flex;\n  flex-direction: row;\n  gap: 40px;\n  align-items: center;\n  margin-bottom: 9px;\n`;\n\nexport const WeightBody = styled('div')`\n  display: flex;\n  flex-direction: column;\n \n`;\n\nexport const WeightHeader = styled('div')`\n  display: flex;\n  flex-direction: row;\n  gap: 40px;\n  align-items: center;\n  margin-bottom: 9px;\n`;\n\nexport const WeigthFrame = styled('div')`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  padding: 24px 24px 36px 24px;\n  border-radius: 12px;\n  background-color: var(--bg-secondary);\n`;\nexport const WeigthItem = styled('div')`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nexport const SelectFrame = styled('div')`\nmargin-bottom: 16px;\n \n`;\n\nexport const CaloriesFrame=styled('div')`\n  width:676px;\n  height: 372px;\n  /* border-radius: 12px; */\n`\nexport const WaterFrame = styled('div')`\n  width: 676px;\n  height: 372px;\n  /* padding:14px 24px 14px 24px; */\n  /* border-radius: 12px; */\n`;","export const MonthCaloriesSet = [\n  { data: 1683, date: '2023-08-01' },\n  { data: 1716, date: '2023-08-02' },\n  { data: 1640, date: '2023-08-03' },\n  { data: 1633, date: '2023-08-04' },\n  { data: 1700, date: '2023-08-05' },\n  { data: 1634, date: '2023-08-06' },\n  { data: 1695, date: '2023-08-07' },\n  { data: 1682, date: '2023-08-08' },\n  { data: 1725, date: '2023-08-09' },\n  { data: 1678, date: '2023-08-10' },\n  { data: 1606, date: '2023-08-11' },\n  { data: 1654, date: '2023-08-12' },\n  { data: 1622, date: '2023-08-13' },\n  { data: 1691, date: '2023-08-14' },\n  { data: 1641, date: '2023-08-15' },\n  { data: 1734, date: '2023-08-16' },\n  { data: 1674, date: '2023-08-17' },\n  { data: 1615, date: '2023-08-18' },\n  { data: 1655, date: '2023-08-19' },\n  { data: 1738, date: '2023-08-20' },\n  { data: 1706, date: '2023-08-21' },\n  { data: 1730, date: '2023-08-22' },\n  { data: 1618, date: '2023-08-23' },\n  { data: 1650, date: '2023-08-24' },\n  { data: 1615, date: '2023-08-25' },\n  { data: 1649, date: '2023-08-26' },\n  { data: 1726, date: '2023-08-27' },\n  { data: 1631, date: '2023-08-28' },\n  { data: 1650, date: '2023-08-29' },\n  { data: 1624, date: '2023-08-30' },\n  { data: 1700, date: '2023-08-31' },\n];\n","export const avarageValue = data => {\n  const numbers = data.map(({ data }) => data);\n  const quantity = numbers.length;\n  const total = numbers.reduce((prevValue, number) => {\n    return prevValue + number;\n  }, 0);\n\n  const result = total / quantity;\n  if (result > 999) {\n    return result.toFixed(0);\n  }\n  if (result < 999) {\n    return result.toFixed(1);\n  }\n};\n","import { getDate, parseISO } from 'date-fns';\nimport { GraphicHeader, GraphicBody } from '../DashboardPage.styled';\n// import { YearCaloriesSet } from '../../../utils/DashBoard/TempData/YearCaloriesSet';\nimport { MonthCaloriesSet } from '../../../utils/DashBoard/TempData/MonthCaloriesSet';\nimport { avarageValue } from '../../../utils/DashBoard/avarageValue';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  LineElement,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n} from 'chart.js';\n\nChartJS.register(LineElement, CategoryScale, LinearScale, PointElement);\n\nexport const Calories = ({ name }) => {\n  const lables = MonthCaloriesSet.map(({ date }) => getDate(parseISO(date)));\n  // const dat = getDate(parseISO(lables[0]))\n  // console.log(dat);\n\n  const caloriesData = MonthCaloriesSet.map(({ data }) => data);\n\n   const titleTooltip = tooltipItems => {\n     return '';\n  };\n  \n  // console.log(caloriesData);\n  const data = {\n    labels: lables,\n\n    datasets: [\n      {\n        data: caloriesData,\n        tension: 0.2,\n        borderColor: 'rgba(227, 255, 168, 1)',\n        backgroundColor: 'rgba(227, 255, 168, 1)',\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const options = {\n    // responsive: true,\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false,\n    },\n    plugins: {\n      tooltip: {\n        yAlign: 'false',\n        displayColors: false,\n        callbacks: {\n          title: titleTooltip,\n          afterLabel: function (context) {\n            return 'milliliters';\n          },\n        },\n      },\n    },\n    pointRadius: 0,\n    scales: {\n      y: {\n        // beginAtZero: true,\n        color: '#B6B6B6',\n        min: 0,\n        max: 3000,\n        ticks: {\n          padding: 8,\n          stepSize: 1000,\n          callback: value => {\n            if (value !== 0) {\n              return value / 1000 + 'K';\n            }\n            if (value === 0) {\n              return value;\n            }\n          },\n        },\n        grid: {\n          lineWidth: 0.5,\n          color: 'rgba(182, 182, 182, 1)',\n          drawTicks: false,\n        },\n      },\n      x: {\n        color: '#B6B6B6',\n        ticks: {\n          padding: 6,\n          align: 'center',\n        },\n        grid: {\n          lineWidth: 0.5,\n          color: 'rgba(182, 182, 182, 1)',\n          drawTicks: false,\n        },\n\n        min: 0,\n        max: 31,\n      },\n    },\n  };\n\n\n  return (\n    <>\n      <GraphicHeader>\n        <p>{name}</p>\n        <p>Avarage value: {avarageValue(MonthCaloriesSet)} cal</p>\n      </GraphicHeader>\n      <GraphicBody>\n        <Line data={data} options={options}></Line>\n      </GraphicBody>\n    </>\n  );\n};\n","export const YearWaterSet = [\n  { data: 1583, date: 'Jan' },\n  { data: 1516, date: 'Feb' },\n  { data: 1540, date: 'Mar' },\n  { data: 1533, date: 'Apr' },\n  { data: 1500, date: 'May' },\n  { data: 1534, date: 'Jun' },\n  { data: 1595, date: 'Jul' },\n  { data: 1582, date: 'Aug' },\n  { data: 1525, date: 'Sep' },\n  { data: 1578, date: 'Oct' },\n  { data: 1506, date: 'Nov' },\n  { data: 1554, date: 'Dec' },\n];\n","import { GraphicHeader, GraphicBody } from '../DashboardPage.styled';\nimport { YearWaterSet } from '../../../utils/DashBoard/TempData/YearWaterSet';\nimport { avarageValue } from '../../../utils/DashBoard/avarageValue';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  LineElement,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  Tooltip,\n} from 'chart.js';\n\nChartJS.register(\n  LineElement,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  Tooltip\n);\n\nexport const Water = ({ name }) => {\n  const lables = YearWaterSet.map(({ date }) => {\n    return date;\n  });\n  console.log(lables);\n\n  const waterData = YearWaterSet.map(({ data }) => {\n    return data;\n  });\n  // console.log(waterData);\n\n  const titleTooltip = tooltipItems => {\n    return '';\n  };\n\n  const data = {\n    type: 'line',\n    labels: lables,\n    datasets: [\n      {\n        data: waterData,\n        tension: 0.9,\n        lable: true,\n        borderColor: 'rgba(227, 255, 168, 1)',\n        spanGaps: true,\n        backgroundColor: 'rgba(227, 255, 168, 1)',\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const options = {\n    // responsive: true,\n    interaction: {\n      mode: 'nearest',\n      axis: 'x',\n      intersect: false,\n    },\n    plugins: {\n      tooltip: {\n        yAlign: 'false',\n        displayColors: false,\n        callbacks: {\n          title: titleTooltip,\n          afterLabel: function (context) {\n            return 'milliliters';\n          },\n        },\n      },\n    },\n    pointRadius: 0,\n    scales: {\n      y: {\n        // beginAtZero: true,\n        color: '#B6B6B6',\n        min: 0,\n        max: 3000,\n        ticks: {\n          padding: 8,\n          stepSize: 1000,\n          callback: value => {\n            if (value !== 0) {\n              return value / 1000 + 'K';\n            }\n            if (value === 0) {\n              return value;\n            }\n          },\n        },\n        grid: {\n          lineWidth: 0.5,\n          color: 'rgba(182, 182, 182, 1)',\n          drawTicks: false,\n        },\n      },\n      x: {\n        color: '#B6B6B6',\n        ticks: {\n          padding: 6,\n          align: 'center',\n        },\n        grid: {\n          lineWidth: 0.5,\n          color: 'rgba(182, 182, 182, 1)',\n          drawTicks: false,\n        },\n\n        min: 0,\n        max: 31,\n      },\n    },\n  };\n\n  return (\n    <>\n      <GraphicHeader>\n        <p>{name}</p>\n        <p>Avarage value: {avarageValue(YearWaterSet)} ml</p>\n      </GraphicHeader>\n\n      <GraphicBody>\n        <Line data={data} options={options}></Line>\n      </GraphicBody>\n    </>\n  );\n};\n","export const YearWeightSet = [\n  { data: 60, date: 'Jan' },\n  { data: 61, date: 'Feb' },\n  { data: 68, date: 'Mar' },\n  { data: 65, date: 'Apr' },\n  { data: 62, date: 'May' },\n  { data: 63, date: 'Jun' },\n  { data: 64, date: 'Jul' },\n  { data: 65, date: 'Aug' },\n  { data: 66, date: 'Sep' },\n  { data: 64, date: 'Oct' },\n  { data: 65, date: 'Nov' },\n  { data: 63, date: 'Dec' },\n];\n","import { nanoid } from 'nanoid';\nimport { avarageValue } from '../../../../utils/DashBoard/avarageValue';\nimport {\n  WeightBody,\n  WeightHeader,\n  WeigthFrame,\n  WeigthItem,\n} from '../../DashboardPage.styled';\n\nimport { YearWeightSet } from '../../../../utils/DashBoard/TempData/YearWeightSet';\n\nexport const Weight = ({ name }) => {\n  return (\n    <>\n      <WeightBody>\n        <WeightHeader>\n          <p>{name}</p>\n          <p>Avarage value: {avarageValue(YearWeightSet)} kg</p>\n        </WeightHeader>\n        <WeigthFrame>\n          {YearWeightSet.map(({ date, data }) => {\n            return (\n              <WeigthItem key={nanoid()}>\n                <div>{data}</div>\n                <div>{date}</div>\n              </WeigthItem>\n            );\n          })}\n        </WeigthFrame>\n      </WeightBody>\n    </>\n  );\n};\n","import Select from 'react-select';\nimport { useState } from 'react';\n// import { SelectFrame } from './SelectPeriod.styled';\n\nexport const SelectPeriod = () => {\n  const [toggleSelect, setToggleSelect] = useState({\n    value: 'lastYear',\n    label: 'Last Year',\n  });\n\n  const changeOption = () => {\n    if (toggleSelect.value === 'lastMonth') {\n      setToggleSelect({\n        value: 'lastYear',\n        label: 'Last Year',\n      });\n    }\n    if (toggleSelect.value === 'lastYear') {\n      setToggleSelect({\n        value: 'lastMonth',\n        label: 'Last Month',\n      });\n    }\n    return;\n  };\n  const options = [toggleSelect];\n\n  return (\n    <Select\n      defaultValue={{ value: 'lastMonth', label: 'Last Month' }}\n      onChange={() => changeOption()}\n      menuPosition=\"fixed\"\n      options={options}\n      styles={{\n        control: baseStyles => ({\n          ...baseStyles,\n          backgroundColor: 'rgba(5, 5, 5, 1)',\n          width: '198px',\n          height: '36px',\n          marginBottom: '4px',\n          border: 'none',\n          placeHolder: 'none',\n        }),\n        indicatorSeparator: () => ({\n          display: 'none',\n        }),\n\n        option: () => ({\n          width: '212px',\n          height: '64px',\n          margin: '0',\n          paddingLeft: '12px',\n          display: 'flex',\n          alignItems: 'center',\n          position: 'relative',\n          borderRadius: '12px',\n          backgroundColor: 'rgba(5, 5, 5, 1)',\n        }),\n        container: () => ({\n          //   width: '212px',\n          //   height: '64px',\n          marginBottom: '4px',\n        }),\n        menu: () => ({\n          width: '212px',\n          height: '64px',\n          borderRadius: '12px',\n          boxShadow: '0px 4px 14px 0px rgba(227, 255, 168, 0.20)',\n          cursor: 'pointer',\n          position: 'absolute',\n        }),\n        singleValue: () => ({\n          margin: '0',\n        }),\n        valueContainer: () => ({\n          padding: '0px',\n        }),\n\n        dropdownIndicator: baseStyles => ({\n          color: 'rgba(227, 255, 168, 1)',\n        }),\n        placeholder: () => ({\n          display: 'none',\n        }),\n        input: () => ({\n          display: 'none',\n          padding: '0px',\n        }),\n      }}\n    />\n  );\n};\n","import { Calories } from './components/Calories';\nimport { Water } from './components/Water';\nimport { Weight } from './components/Weight/Weight';\nimport { SelectPeriod } from './SelectPeriod/SelectPeriod';\n\nimport {\n  Frame,\n  GraphicFrame,\n  CaloriesFrame,\n  WaterFrame,\n} from './DashboardPage.styled';\n\nconst DashboardPage = () => {\n\n  return (\n    <>\n      <div>\n        <Frame>\n          <div>\n            <SelectPeriod />\n          </div>\n          <GraphicFrame>\n            <CaloriesFrame>\n              <Calories name=\"Calories\" />\n            </CaloriesFrame>\n            <WaterFrame>\n              <Water name=\"Water\" />\n            </WaterFrame>\n          </GraphicFrame>\n          <Weight name=\"Weight\" />\n        </Frame>\n      </div>\n    </>\n  );\n};\n\nexport default DashboardPage;\n"],"names":["Frame","styled","_templateObject","_taggedTemplateLiteral","GraphicFrame","_templateObject2","GraphicBody","_templateObject3","GraphicHeader","_templateObject4","WeightBody","_templateObject5","WeightHeader","_templateObject6","WeigthFrame","_templateObject7","WeigthItem","_templateObject8","CaloriesFrame","_templateObject9","_templateObject10","WaterFrame","_templateObject11","MonthCaloriesSet","data","date","avarageValue","numbers","map","_ref","quantity","length","result","reduce","prevValue","number","toFixed","ChartJS","register","LineElement","CategoryScale","LinearScale","PointElement","Calories","name","labels","_ref2","getDate","parseISO","datasets","_ref3","tension","borderColor","backgroundColor","borderWidth","options","interaction","mode","axis","intersect","plugins","tooltip","yAlign","displayColors","callbacks","title","tooltipItems","afterLabel","context","pointRadius","scales","y","color","min","max","ticks","padding","stepSize","callback","value","grid","lineWidth","drawTicks","x","align","_jsxs","_Fragment","children","_jsx","Line","YearWaterSet","Tooltip","Water","lables","console","log","type","lable","spanGaps","YearWeightSet","Weight","nanoid","SelectPeriod","_useState","useState","label","_useState2","_slicedToArray","toggleSelect","setToggleSelect","Select","defaultValue","onChange","menuPosition","styles","control","baseStyles","_objectSpread","width","height","marginBottom","border","placeHolder","indicatorSeparator","display","option","margin","paddingLeft","alignItems","position","borderRadius","container","menu","boxShadow","cursor","singleValue","valueContainer","dropdownIndicator","placeholder","input"],"sourceRoot":""}